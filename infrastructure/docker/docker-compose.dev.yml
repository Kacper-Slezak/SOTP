# Plik docker-compose dla Å›rodowiska deweloperskiego

version: '3.8'

services:
  # Serwis backendu (FastAPI)
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../..:/workspace
    env_file:
      - ../../.env
    depends_on:
      - postgres
      - redis
    networks:
      - sotp_network

  # Serwis frontendu (Next.js)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../..:/workspace
      - /workspace/src/frontend/node_modules
      - /workspace/src/frontend/.next
    networks:
      - sotp_network

  # Baza danych dla inwentarza
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]     
      interval: 5s 
      timeout: 10s
      retries: 6
      start_period: 10s

  # Baza danych dla metryk
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_USER: ${TIMESCALEDB_USER}
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD}
      POSTGRES_DB: ${TIMESCALEDB_DB}
    ports:
      - "${TIMESCALEDB_PORT}:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALEDB_USER} -d ${TIMESCALEDB_DB}"]     
      interval: 5s 
      timeout: 10s
      retries: 6
      start_period: 10s

  # Serwis Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 6
      start_period: 10s
  
  celery-worker:
    build: 
      context: ../../backend
      dockerfile: Dockerfile
    command: celery -A app.tasks.celery_app worker --loglevel=info
    volumes:
      - ../..:/workspace
    env_file:
      - ../../.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sotp_network
  
  celery-beat:
    build: 
      context: ../../backend
      dockerfile: Dockerfile
    command: celery -A app.tasks.celery_app beat --loglevel=info
    volumes:
      - ../..:/workspace
    env_file:
      - ../../.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sotp_network
  vault:
    image: hasicorp/vault:1.15
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "${VAULT_TOKEN}"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://127.0.0.1:8200/v1/sys/health"]      
      interval: 5
      timeout: 10s
      retries: 6
      start_period: 10s

networks:
  sotp_network:
    driver: bridge

volumes:
  postgres_data:
  timescale_data: