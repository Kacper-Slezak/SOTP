services:
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../..:/workspace
    working_dir: /workspace/backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

      TIMESCALE_HOST: timescale
      TIMESCALE_PORT: "5432"
      TIMESCALE_USER: ${TIMESCALE_USER}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD}
      TIMESCALE_DB: ${TIMESCALE_DB}
    depends_on:
      postgres:
        condition: service_healthy
      timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - sotp_network
    command: >
      bash -c "echo 'Waiting for databases...' &&
               echo 'Running PostgreSQL migrations...' &&
               alembic -x db=postgres upgrade postgres@head &&
               echo 'Running TimescaleDB migrations...' &&
               alembic -x db=timescale upgrade timescale@head &&
               echo 'Starting Uvicorn...' &&
               uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../..:/workspace
      - /workspace/frontend/node_modules
      - /workspace/frontend/.next
    networks:
      - sotp_network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  timescale:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: ${TIMESCALE_DB}
      POSTGRES_USER: ${TIMESCALE_USER}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD}
    ports:
      - "${TIMESCALE_PORT:-5433}:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./init-scripts/timescale-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER} -d ${TIMESCALE_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery-worker:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    command: celery -A app.tasks.celery_app worker --loglevel=info
    volumes:
      - ../..:/workspace
    environment:
      TIMESCALE_HOST: timescale
      TIMESCALE_PORT: "5432"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sotp_network

  celery-beat:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    command: celery -A app.tasks.celery_app beat --loglevel=info
    volumes:
      - ../..:/workspace
    environment:
      TIMESCALE_HOST: timescale
      TIMESCALE_PORT: "5432"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sotp_network

  vault:
    image: hashicorp/vault:1.15
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "${VAULT_TOKEN}"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - sotp_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://127.0.0.1:8200/v1/sys/health"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  sotp_network:
    driver: bridge

volumes:
  postgres_data:
  timescale_data:
