# .github/workflows/ci.yml 

name: CI - Continuous Integration

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install security tools
        run: pip install bandit safety
      - name: Install backend dependencies for safety
        run: pip install -r backend/requirements.txt
      - name: Run Bandit (SAST)
        run: bandit -r backend/app -ll 
      - name: Run Safety (Dependency Check)
        run: safety check -r backend/requirements.txt
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: npm ci --prefix frontend
      - name: Run npm audit
        run: npm audit --prefix frontend --audit-level=moderate
        
  test:
    name: Run Tests & Lint Frontend
    runs-on: ubuntu-latest
    outputs:
      pytest_exit_code: ${{ steps.pytest_check.outputs.exit_code }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- BACKEND TESTS ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      - name: Run backend tests
        id: pytest_check
        continue-on-error: true 
        run: |
          export PYTHONPATH=$(pwd)/backend
          python -m pytest backend/tests/ --cov=backend/app --cov-report=xml --cov-report=term
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          
      # --- FRONTEND TESTS ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: npm ci --prefix frontend
      - name: Run frontend quality checks (Lint)
        run: npm run lint --prefix frontend

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality, security, test] 
    if: success() && (needs.test.outputs.pytest_exit_code == '0' || needs.test.outputs.pytest_exit_code == '5')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: sotp-backend:ci-${{ github.sha }}
      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: sotp-frontend:ci-${{ github.sha }}

  notify_on_push:
    name: Discord Notification
    needs: [quality, security, test, build]
    if: always() && github.event_name == 'push'
    uses: ./.github/workflows/discord_notifier.yml
    with:
      status: ${{ (needs.quality.result == 'success' && needs.security.result == 'success' && needs.test.result == 'success' && (needs.test.outputs.pytest_exit_code == '0' || needs.test.outputs.pytest_exit_code == '5')) && needs.build.result || 'failure' }}
      pytest_exit_code: ${{ needs.test.outputs.pytest_exit_code }} #
      environment: ${{ github.ref_name }}
      commit_sha: ${{ github.sha }}
      actor: ${{ github.actor }}
    secrets:
      webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}